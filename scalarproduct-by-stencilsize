#!/bin/bash

# Default files
default_analyt_normal_mode="modes/mode_44"
       default_output_file="/dev/stdout"
default_constructed_mode_1="modes/constructed_mode_101"
default_constructed_mode_2="modes/constructed_mode_102"
         default_potential="2D_mode_scans/numerov2d/modes_101_102_energies.dat"

function MAN {
    cat << EOF
Synopsis: ${0##*/} {h}
            [analytical normal mode]
            [output file]
            [1st constructed mode]
            [2nd constructed mode]
            [potential file]

Description:
    Calculates Hessian matrices of a given potential with a variety of
    stencil sizes and constructs new combined modes (CC) out of two
    constructed modes and the generated Hessian.
    Afterwards outputs the scalar products of the analytical mode
    with the CC and the CC's reduced masses for differen 2D stencil
    sizes.
        
    The default values are:
        analyt_normal_mode  $default_analyt_normal_mode
        output_file         $default_output_file
        constructed_mode_1  $default_constructed_mode_1
        constructed_mode_2  $default_constructed_mode_2
        potential           $default_potential
EOF
}
export -f MAN

for i in $@; do if [[ $i == '-h' ]]; then MAN; exit 0; fi; done
if [[ $# > 5 ]]; then MAN; exit 0; fi

# fill default parameters
analyt_normal_mode=${1:-$default_analyt_normal_mode}
       output_file=${2:-$default_output_file}
constructed_mode_1=${3:-$default_constructed_mode_1}
constructed_mode_2=${4:-$default_constructed_mode_2}
         potential=${5:-$default_potential}

if [ ! -e $analyt_normal_mode ]; then
    echo "Analytical normal mode \"$analyt_normal_mode\" could not be found"
    echo "Aborting..."
    exit 1
fi

if [ ! -e $constructed_mode_1 ]; then
    echo "Constructed mode \"$constructed_mode_1\" could not be found"
    echo "Aborting..."
    exit 1
fi

if [ ! -e $constructed_mode_2 ]; then
    echo "Constructed mode \"$constructed_mode_2\" could not be found"
    echo "Aborting..."
    exit 1
fi

if [ ! -e $potential ]; then
    echo "Potential file \"$potential\" could not be found"
    echo "Aborting..."
    exit 1
fi

if [ $output_file != $default_output_file ]; then
    if [ -e $output_file ]; then
        printf "The file \"$output_file\" already exists, do you want to delete it? [y/n]\n" 1>&2
        read var
    
        if [ $var = y ]; then
            rm $output_file
        else
            printf "File will be preserved, aborting...\n" 1>&2
            exit
        fi
    fi
fi

for sx in $(seq 3 2 13); do
    Hess=$(2d_differenciation -i $potential -x $sx | grep -P "^\s*[- ]0\.0{14}\s*[- ]0\.0{14}\s*[- ]" | awk '{printf "[%.14lf,%.14lf;%.14lf,%.14lf]\n", $(NF-2), $NF, $NF, $(NF-1)}')
    
    printf "\n2D diff stencil size = ${sx}x${sx}\n" >> $output_file
    octave --silent --no-gui << EOF >> $output_file
        format long;
        
    # input
        analyt = load("$analyt_normal_mode");
        const1 = load("$constructed_mode_1");
        const2 = load("$constructed_mode_2");
        
    # construct combination modes
        [evec, eval] = eig($Hess);
        comb_1 = evec(1,1) * const1(:,1:3) + evec(2,1) * const2(:,1:3);
        comb_2 = evec(1,2) * const1(:,1:3) + evec(2,2) * const2(:,1:3);
        comb_1(:,4) = comb_2(:,4) = analyt(:,4);
        
    # calculate scalar product with analytic mode
        sc_analyt = sum(sum(analyt(:,1:3).*analyt(:,1:3)));
        sc_comb_1 = sum(sum(comb_1(:,1:3).*analyt(:,1:3)));
        sc_comb_2 = sum(sum(comb_2(:,1:3).*analyt(:,1:3)));
        
    # calculate masses
        mass_analyt=sum(sum(analyt(:,1:3).^2 .* analyt(:,4)));
        mass_const1=sum(sum(const1(:,1:3).^2 .* const1(:,4)));
        mass_const2=sum(sum(const2(:,1:3).^2 .* const2(:,4)));
        mass_comb_1=sum(sum(comb_1(:,1:3).^2 .* comb_1(:,4)));
        mass_comb_2=sum(sum(comb_2(:,1:3).^2 .* comb_2(:,4)));
        
    # output
        fd=stdout;
        fprintf(fd, "sc/mass analyt\t%.8f\t%.8f\n", sc_analyt, mass_analyt);
        fprintf(fd, "sc/mass comb_1\t%.8f\t%.8f\n", sc_comb_1, mass_comb_1);
        fprintf(fd, "sc/mass comb_2\t%.8f\t%.8f\n", sc_comb_2, mass_comb_2);
EOF

done
