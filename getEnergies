#!/bin/bash

#--------------------------------------------------------------------------------
#                               Default parameters
#--------------------------------------------------------------------------------
   DefaultOutDir="numerov"
    OutputSuffix="energies.dat"

       dimension="2"
      grepstring="SCF Done"
    columnnumber="5"


#--------------------------------------------------------------------------------
#                                Print help page
#--------------------------------------------------------------------------------
function MAN {
cat << EOF 1>&2

Synopsis:  ${0##*/} {-h}
                    {-d Output directory}
                    {-o Output file suffix}
                    {-D Dimensionality}
                    {-g Grep String}
                    {-c Column Number}
                    [list of input directories]

Description:
    Takes a mode scan directory and extracts the
        - coordinates (q1 .. qn)
        - energies specified by "Grep string" and "Column number"
        - x-/y-/z- dipole moments
    to an output file and verifies that all entries are populated
    Parallelized using xargs

    The default values are:
        Dimensionality    = ${dimension}
        Output Directory  = ${DefaultOutDir}/${dimension}D
        Output File Name  = <outputdirectory>/modes_<ModeNo>_<q1>x<q2>x..<qn>_${OutputSuffix}
        Grep String       = $grepstring
        Column Number     = $columnnumber

EOF
}
export -f MAN
for i in $@; do if [[ $i == '-h' ]]; then MAN; exit 0; fi; done
if [ $# -eq 0 ]; then MAN; exit 0; fi


#--------------------------------------------------------------------------------
#               Populate variables and provide input error handling
#--------------------------------------------------------------------------------
while getopts "d:o:D:g:c:hH" opt; do
    case $opt in
        d)         OutputDir="$OPTARG";;
        o)      OutputSuffix="$OPTARG";;
        D)         dimension="$OPTARG";;
        g)        grepstring="$OPTARG";;
        c)      columnnumber="$OPTARG";;
        h|H)  MAN; exit 0;;
    esac
done
shift $(( OPTIND - 1 ))

InputDirectoryList=${@}
for i in ${InputDirectoryList}; do
    if [ ! -d $i ]; then
        printf "Error: The provided input directory (\"$i\") is not valid\n" >&2
        MAN
        exit 1
    fi
done

# check if dimension is an integer
if [[ "${dimension}" =~ ^[+-]?[0-9]+$ ]]; then
# check if the integer is greater than zero
    if [ 0 -ge "${dimension}" ]; then
        printf "Error: Dimension (\""${dimension}"\") has to be an integer greater than zero\n" >&2
        exit 1
    fi
else
    printf "Error: Dimension (\""${dimension}"\") has to be passed as an integer\n" >&2
    exit 1
fi

# check if grep string is set
if [ -z "$grepstring" ]; then
    printf "Error: No \"grep string\" specified\n" >&2
    MAN
    exit 1
fi

# check if column number is set
if [ -z $columnnumber ]; then
    printf "Error: No \"column number\" specified\n" >&2
    MAN
    exit 1
else
# check if column number is an integer
    if [[ "${columnnumber}" =~ ^[+-]?[0-9]+$ ]]; then
    # check if the integer is greater than zero
        if [ 0 -ge "${columnnumber}" ]; then
            printf "Error: Column number (\""${columnnumber}"\") has to be an integer greater than zero\n" >&2
            exit 1
        fi
    else
        printf "Error: Column number (\""${columnnumber}"\") has to be passed as an integer\n" >&2
        exit 1
    fi
fi

# if no output directory is specified use default_dir/<dimension>D
if [ -z ${OutputDir} ]; then OutputDir="${DefaultOutDir}/${dimension}D"; fi
OutputDir=${PWD}/${OutputDir}


#--------------------------------------------------------------------------------
#                             Actual start of Script
#--------------------------------------------------------------------------------

export OutputDir OutputSuffix
export dimension
export grepstring columnnumber

function ExtractData {
    # set mode directory and remove possible trailing slash
        ModeDir="$1";
        printf "Entering directory \"${ModeDir}\"\n"
        if [ ! -d ${ModeDir} ]; then printf "Input error" >&2; exit 1; fi
        ModeDir="${ModeDir%/}"

    # get mode name from mode directory and set temporary file name and OutputPrefix
        ModeName="${ModeDir##*/}"
        tmp_file="${OutputDir}/tmp_${ModeName}"
        if [ -e ${tmp_file} ]; then rm "${tmp_file}"; fi

        OutputPrefix="mode"
        if [ ${dimension} -ne 1 ]; then OutputPrefix="${OutputPrefix}s"; fi
        OutputPrefix="${OutputPrefix}_$(sed "s/modes\?_//" <<< ${ModeName##*/})"

    # go to mode directory and create OutputDir
        cd ${ModeDir}
        if [ ! -d ${OutputDir} ]; then mkdir -p ${OutputDir}; fi


    # start extraction
        for i in *.log; do
        # get coordinates from file name:
        #   * remove everything from front till (including) "_dr="
        #   * change all underscores to tabs
        #   * remove trailing .log
            coords=$(sed "s/^/\t/; s/_/\t/g; s/\.log$//" <<< ${i##*_dr=})

        # extract energy values by application of $grepstring and $columnnumber
            energy=$(grep "${grepstring}" $i | sed "s/[eEdD]/e/g" | awk '{printf "%+.14lf\n", $'${columnnumber}'}')

        # extract dipole moment
            dipole=$(grep -A1 "Dipole moment" $i | tail -n1 | awk '{printf "% .6lf\t% .6lf\t% .6lf", $2, $4, $6}')

        # print to temporary file
            if [ -z $energy ]; then echo "$i not terminated" 1>&2 ; continue; fi
            printf -- "${coords}\t${energy}\t${dipole}\n" >> ${tmp_file}

        done


    # check if every line has the correct column count
        control=$(awk 'BEGIN{ n_col = '${dimension}' + 1 + 3; control = 0; } { if(NF != n_col){control = -1; exit} } END{ print control }' ${tmp_file})
        if [ ${control} -ne 0 ]; then
            printf "Error: Column count not equal in all lines\n" 1>&2
            exit 1
        fi


    # get dimension sizes
        dimension_line="N"
        for dim in $(seq 1 ${dimension}); do

        # get number of entries for each dimension by:
        #   * removing all non data lines (empty lines or lines starting with N or #)
        #   * getting the unique values of every column as well as the number of their
        #     occurence (<number of occurence> <column value>)
        #   * if all values have the same number of occurences count unique entries
        #     (line count), if not return -1
            size=$(grep -v "^\s*\(N\|#\|$\)" ${tmp_file} | sort -gk${dim} | awk '{print $'${dim}'}' | uniq -c | awk '{ if(NR == 1){count=$1}; if($1 != count){count = -1} } END{if(count != -1){ print NR }else{ print count} }')

            if [ $size -ne -1 ]; then
                dimension_line="${dimension_line}\t${size}"
            else
                printf "Error: Inconsistent number of coordinates in ${ModeName}\n"
                exit 1
            fi

        done
    # print dimension line
        printf "${dimension_line}\n" >> ${tmp_file}


    # print header line
        header_line="#"
        for dim in $(seq 1 ${dimension}); do
            header_line="${header_line}\t       q${dim}      "
        done
        printf "${header_line}\t   Energy in hartree\t  dipole moment {x,y,z} in debye\n" >> ${tmp_file}


    # determine final output file name
        sizes="$(sed 's/\\t/x/g; s/^\s*[Nn]x//' <<< $dimension_line)"
        if [ $dimension -eq 1 ]; then sizes="x${sizes}"; fi

        OutputFile="${OutputDir}/${OutputPrefix}_${sizes}_energies.dat"

    # sort temporary file into output file
        for dim in $(seq 1 ${dimension}); do
            sort_order="${sort_order} -k${dim}"
        done

        sort -g ${sort_order} ${tmp_file} > ${OutputFile}
        rm ${tmp_file}
        cd - >/dev/null
}
export -f ExtractData

# parallel run of ExtractData():
#   first print all arguments (the function only takes one)
#   since xargs -I{} implies -xL1 split the argument line to one entry per line
#   use xargs -P0 -n1 (max-procs=max, number of arguments = 1) to parallelize
echo ${InputDirectoryList} | sed "s/\s\+/\n/g" | xargs -P0 -n1 -I{} -- bash -c 'ExtractData {}'
