#!/bin/bash

#--------------------------------------------------------------------------------
#                               Default parameters 
#--------------------------------------------------------------------------------
#   for octave
        mode_A="modes/constructed_mode_101"
        mode_B="modes/constructed_mode_102"
        masses="masses"
     cc_mode_A="modes/constructed_combination_101+102_hess_01"
     cc_mode_B="modes/constructed_combination_101+102_hess_02"
#   2d_differenciation
     potential="2D_mode_scans/numerov2d/modes_101_102_energies.dat"
  stencil_size="13"
output_2d_diff=""


#--------------------------------------------------------------------------------
#                                Print help page
#--------------------------------------------------------------------------------
function MAN {
    cat << EOF
Synopsis:  ${0##*/} {-h}
                    {-a First  constructed mode}
                    {-b Second constructed mode}
                    {-p Potential file}
                    {-m Masses file}
                    {-A First  combined mode}
                    {-B Second combined mode}
                    {-s Stencil size of 2d_differenciation}
                    {-d Output 2D diff to file}
    
Requires:
    GNU/Octave
    2d_differenciation

Description:
    Takes two (constructed) modes a potential file (out of an energy scan) and
    a masses file. Then performes a 2D differenciation on the potential and
    diagonalizes the resulting sub-Hessian matrix.
    Afterwards the two input modes get blended according to the weighting,
    provided by the sub-Hessian's eigenvectors.
        -> outputs two combined modes
        -> optionally outputs the full 2D differenciation of
            the potential to a file (specified by -d)


    The default values are:
      Input:
        First  constructed mode     $mode_A
        Second constructed mode     $mode_B
        Potential file              $potential
        Masses file                 $masses
      Output:
        First  combined mode        $cc_mode_A
        Second combined mode        $cc_mode_B
      2D differenciation:
        Stenzil size                $stencil_size
        Output 2D diff to file      $output_2d_diff
EOF
}
export -f MAN
for i in $@; do if [[ $i == '-h' ]]; then MAN; exit 0; fi; done


#--------------------------------------------------------------------------------
#               Populate variables and provide input error handling
#--------------------------------------------------------------------------------
while getopts "a:b:A:B:m:p:s:d:hH" opt; do
    case $opt in
        a)           mode_A="$OPTARG";;
        b)           mode_B="$OPTARG";;
        m)           masses="$OPTARG";;
        A)        cc_mode_A="$OPTARG";;
        B)        cc_mode_B="$OPTARG";;
        p)        potential="$OPTARG";;
        s)     stencil_size="$OPTARG";;
        d)   output_2d_diff="$OPTARG";;
        h|H) MAN; exit 0;;
    esac
done
shift $(( OPTIND - 1 ))

# check for population
    if [ -z $mode_A       ]; then printf "mode_A       is empty\n" 1>&2; exit 1; fi
    if [ -z $mode_B       ]; then printf "mode_B       is empty\n" 1>&2; exit 1; fi
    if [ -z $masses       ]; then printf "masses       is empty\n" 1>&2; exit 1; fi
    if [ -z $potential    ]; then printf "potential    is empty\n" 1>&2; exit 1; fi
    if [ -z $cc_mode_A    ]; then printf "cc_mode_A    is empty\n" 1>&2; exit 1; fi
    if [ -z $cc_mode_B    ]; then printf "cc_mode_B    is empty\n" 1>&2; exit 1; fi
    if [ -z $stencil_size ]; then printf "stencil_size is empty\n" 1>&2; exit 1; fi

# check for file existance
#   input files
    if [ ! -r $mode_A         ]; then printf "mode_A    could not be read\n" 1>&2; exit 2; fi
    if [ ! -r $mode_B         ]; then printf "mode_B    could not be read\n" 1>&2; exit 2; fi
    if [ ! -r $masses         ]; then printf "masses    could not be read\n" 1>&2; exit 2; fi
    if [ ! -r $potential      ]; then printf "potential could not be read\n" 1>&2; exit 2; fi
#   output files
    if [ -e $cc_mode_A      ]; then
        printf "File \"$cc_mode_A\" already exists, do you want to overwrite it?[y/n]\n" 1>&2
        read val
        
        if [[ $val != 'y' ]]; then
            printf "Aborting...\n\n"
            exit 3
        fi
    fi

    if [ -e $cc_mode_B      ]; then
        printf "File \"$cc_mode_B\" already exists, do you want to overwrite it?[y/n]\n" 1>&2
        read val
        
        if [[ $val != 'y' ]]; then
            printf "Aborting...\n\n"
            exit 3
        fi
    fi
 
    if [ ! -z $output_2d_diff ]; then
        if [ -e $output_2d_diff ]; then
            printf "File \"$output_2d_diff\" already exists, do you want to overwrite it?[y/n]\n" 1>&2
            read val
            
            if [[ $val != 'y' ]]; then
                printf "Aborting...\n\n"
                exit 3
            fi
        fi
    fi


#--------------------------------------------------------------------------------
#                             Actual start of Script
#--------------------------------------------------------------------------------
Hess=$(2d_differenciation -i $potential -x $stencil_size | tee $output_2d_diff | awk '/^\s*[- ]0\.0{10}.{4}\s*[- ]0\.0{10}/ {printf "[%.14lf,%.14lf;%.14lf,%.14lf]\n", $(NF-2), $(NF), $(NF), $(NF-1)}')

if [ -z $Hess ]; then
    printf "Error: No data for further calculations found\n" 1>&2
    printf "       Aborting...\n\n" 1>&2
    exit 4;
fi

# output Hessian to stderr
sed "s/\[/\nHessian:\n\t/; s/,/\t/g; s/;/\n\t/; s/\]/\n/" <<< "$Hess" 1>&2

octave --silent --no-gui << EOF
# input
    c_mode_1 = load("$mode_A");
    c_mode_2 = load("$mode_B");
    masses   = load("$masses");
    
# diagonalisation
    [evec, eval] = eig($Hess);
    
# construct combined modes
    cc_mode_1 = c_mode_1(:,1:3) * evec(1,1) + c_mode_2(:,1:3) * evec(2,1);
    cc_mode_2 = c_mode_1(:,1:3) * evec(1,2) + c_mode_2(:,1:3) * evec(2,2);
    cc_mode_1(:,4) = cc_mode_2(:,4) = masses;

# output
    fd = fopen("$cc_mode_A", "w");
    fprintf(fd, "\t% 20.14f\t% 20.14f\t% 20.14f\t% .8E\n", transpose(cc_mode_1));
    fclose(fd);

    fd = fopen("$cc_mode_B", "w");
    fprintf(fd, "\t% 20.14f\t% 20.14f\t% 20.14f\t% .8E\n", transpose(cc_mode_2));
    fclose(fd);

EOF
