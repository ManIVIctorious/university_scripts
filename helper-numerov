#!/bin/bash


EConvFactor="2625.49962" # (kJ/mol) / hartree

   InputDir="2D_mode_scans/numerov2d"
  OutputDir="." #relative to InputDir
      force=0
     nodiff=0

#--------------------------------------------------------------------------------
#                              Function definition
#--------------------------------------------------------------------------------
function overwrite {
    file=$1
    
    # if output files already exist check force status
    #   force = 0: ask
    #   force = 1: continue output anyway
    #        else: Skip the generation of these files
    if [ $force -eq 0 ]; then

        printf "\tThe file \"$file\" already exists, do you want to overwrite it? [y/n]\n" 1>&2

        read answer
        if [ ! -z $answer ]; then
            if [ $answer = 'y' ]; then
                rm $file
            fi
        fi

    elif [ $force -eq 1 ]; then
        printf "\tThe file \"$file\" already exists, do you want to overwrite it? [y/n]\n" 1>&2
        printf "\t\tForce enabled, continuing anyway\n" 1>&2
        rm $file
    fi
}
export -f overwrite


#--------------------------------------------------------------------------------
#              Populate variables and provide input error handling
#--------------------------------------------------------------------------------
while getopts "i:o:fFnhH" opt; do
    case $opt in
        i)   InputDir="$OPTARG";;
        o)  OutputDir="$OPTARG";;
        f)      force=1;;
        F)      force=2;;
        n)     nodiff=1;;
        h|H)  MAN; exit 0;;
    esac
done
shift $(( OPTIND - 1 ))


#--------------------------------------------------------------------------------
#                            Actual beginning of Script
#--------------------------------------------------------------------------------
# Generate trajectories for individual 2D modes
if   [ $force -eq 1 ]; then
    genTrajectories -f
elif [ $force -eq 2 ]; then
    genTrajectories -F
else
    genTrajectories
fi

# Get energies of 2D mode scans
if   [ $force -eq 1 ]; then
    get2Denergies -f
elif [ $force -eq 2 ]; then
    get2Denergies -F
else
    get2Denergies
fi

if [ ! -d  $InputDir ]; then echo "Please specify a valid input directory"  1>&2; exit; fi
if [ ! -d $OutputDir ]; then echo "Please specify a valid output directory" 1>&2; exit; fi

# Generate Numerov2D data files and their potential's 2D differentiations
cd ${InputDir}
for EnergyFile in *_energies.dat; do
    for StencilSize in 11 13; do
        OutfilePrefix="${OutputDir}/numerov2d_${EnergyFile%_energies.dat}_m=1_k=1_v=${EConvFactor}_n=${StencilSize}"

    # 2DNumerov without splining
        outfile=${OutfilePrefix}_ads=0.dat
        if [   -e $outfile ]; then overwrite $outfile; fi
        if [ ! -e $outfile ]; then
            numerov2d -i ${EnergyFile} -m1 -k1 -v ${EConvFactor} -n ${StencilSize} -ads0 -o $outfile
        fi
        
    # 2DNumerov with splining
        outfile=${OutfilePrefix}_ads=1.dat
        if [   -e $outfile ]; then overwrite $outfile; fi
        if [ ! -e $outfile ]; then
            numerov2d -i ${EnergyFile} -m1 -k1 -v ${EConvFactor} -n ${StencilSize} -ads1 -o $outfile
        fi

    done

# 2D differentiation of potential
    infile=${OutfilePrefix}_ads=0.dat 
    if [ ! -e $infile  ]; then continue; fi
    if [ $nodiff -eq 1 ]; then continue; fi

    outfile=${OutputDir}/2d_diff_of_${OutfilePrefix##*/}_ads=0.dat
    if [   -e $outfile ]; then overwrite $outfile; fi
    if [ ! -e $outfile ]; then
        2d_differenciation -i $infile -x13 -o $outfile
    fi
done


#--------------------------------------------------------------------------------
#                    Show Numerov excitaions within less -S
#--------------------------------------------------------------------------------
for i in numerov2d_*_n=11_ads=0.dat; do
    printf "\n$i\n"
            sed -n "/Frequencies:/,/Orthonormality:/p" $i | head -n-2
done | less -S
